<?php
/*
 * For the full copyright and license information, please view the LICENSE
 *  file that was distributed with this source code.
 *
 * ██████   █████  ██   ██ ██   ██  █████  ███████  █████
 * ██   ██ ██   ██ ██  ██  ██   ██ ██   ██ ██      ██   ██
 * ██████  ███████ █████   ███████ ███████ ███████ ███████
 * ██   ██ ██   ██ ██  ██  ██   ██ ██   ██      ██ ██   ██
 * ██   ██ ██   ██ ██   ██ ██   ██ ██   ██ ███████ ██   ██
 *
 *
 *
 *  @modified   6/15/22, 10:15 AM
 *  @company   PT. Turahe Arta HQ
 *  @author         Nur Wachid
 *  @copyright      Copyright (c) 2022.
 *
 */
namespace Turahe\Otp\Test;

use Turahe\Otp\OtpServiceProvider;
use Illuminate\Support\Facades\File;
use Illuminate\Foundation\Application;
use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;

abstract class TestCase extends \Orchestra\Testbench\TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function getPackageProviders($app)
    {
        return [
            OtpServiceProvider::class,
        ];
    }

    /**
     * @param Application $app
     */
    protected function getEnvironmentSetUp($app)
    {
        $this->initializeDirectory($this->getTempDirectory());

        config()->set('database.default', 'sqlite');
        config()->set('database.connections.sqlite', [
            'driver'   => 'sqlite',
            'database' => $this->getTempDirectory() . '/database.sqlite',
            'prefix'   => '',
        ]);
    }

    /**
     * @param Application $app
     */
    protected function setUpDatabase(Application $app)
    {
        file_put_contents($this->getTempDirectory() . '/database.sqlite', null);

        Schema::create('test_models', function (Blueprint $table) {
            $table->increments('id');
            $table->string('name')->nullable();
            $table->string('other_field')->nullable();
            $table->string('url')->nullable();
        });
    }

    protected function initializeDirectory(string $directory)
    {
        if (File::isDirectory($directory)) {
            File::deleteDirectory($directory);
        }
        File::makeDirectory($directory);
    }

    protected function getTempDirectory(): string
    {
        return __DIR__ . '/temp';
    }
}
